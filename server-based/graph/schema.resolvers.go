package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"
	"github.com/AkshatJawne/LetsGOCustomers/graph/model"
	"github.com/AkshatJawne/LetsGOCustomers/database"
)
// TODO: Will need to update links above

var db = database.Connect()

// CreateCustomer is the resolver for the createCustomer field.
func (r *mutationResolver) CreateCustomer(ctx context.Context, input model.CreateCustomerInput) (*model.Customer, error) {
	return db.CreateCustomer(input), nil
}

// UpdateCustomer is the resolver for the updateCustomer field.
func (r *mutationResolver) UpdateCustomer(ctx context.Context, id string, input model.UpdateCustomerInput) (*model.Customer, error) {
	return db.UpdateCustomer(id, input), nil
}

// DeleteCustomer is the resolver for the deleteCustomer field.
func (r *mutationResolver) DeleteCustomer(ctx context.Context, id string) (*model.DeleteCustomer, error) {
	return db.DeleteCustomer(id), nil
}

// Customers is the resolver for the customers field.
func (r *queryResolver) C ustomers(ctx context.Context) ([]*model.Customer, error) {
	return db.GetCustomers(), nil 
}
 
// Representative is the resolver for the representative field.
func (r *queryResolver) Representative(ctx context.Context, id string) (*model.Customer, error) {
	return db.GetCustomer(id), nil 
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
